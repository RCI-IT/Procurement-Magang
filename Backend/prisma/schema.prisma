generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model PermintaanLapangan {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  nomor               String              @unique
  tanggal             DateTime
  lokasi              String
  picLapangan         String
  status              PermintaanStatus    @default(PENDING)
  isConfirmed         Boolean             @default(false)
  isReceived          Boolean             @default(false)
  keterangan          String?
  confirmationOrderId Int?                @unique
  detail              PermintaanDetails[]
  confirmationOrder   ConfirmationOrder?  @relation(fields: [confirmationOrderId], references: [id])
  userId              Int?
  user                User?               @relation(fields: [userId], references: [id])
}
model PurchaseOrder {
  id                  Int               @id @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  nomorPO             String            @unique
  tanggalPO           DateTime
  lokasiPO            String
  keterangan          String?
  confirmationOrderId Int               @unique
  confirmationOrder   ConfirmationOrder @relation("COToPO", fields: [confirmationOrderId], references: [id], onDelete: Cascade)
  purchaseDetails     PurchaseDetails[]
  userId              Int?
  user                User?             @relation(fields: [userId], references: [id])
}
model PurchaseDetails {
  id              Int           @id @default(autoincrement())
  purchaseOrderId Int
  materialId      Int
  qty             Int
  code            String
  satuan          String
  keterangan      String?
  status          POStatus          @default(IN_PROGRESS)
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  material        Materials     @relation(fields: [materialId], references: [id], onDelete: Cascade)
}
model ConfirmationOrder {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  nomorCO             String                @unique
  tanggalCO           DateTime
  lokasiCO            String
  keterangan          String?
  status              COStatus              @default(PENDING)
  confirmationDetails ConfirmationDetails[]
  permintaan          PermintaanLapangan?
  userId              Int?
  user                User?                 @relation(fields: [userId], references: [id])
  purchaseOrder       PurchaseOrder?        @relation("COToPO")
}
model ConfirmationDetails {
  id                   Int                @id @default(autoincrement())
  confirmationOrderId  Int
  permintaanDetailId   Int
  qty                  Int
  code                 String
  keterangan           String?
  satuan               String
  status               DetailStatus       @default(PENDING)
  permintaanDetail     PermintaanDetails  @relation(fields: [permintaanDetailId], references: [id], onDelete: Cascade)
  confirmationOrder    ConfirmationOrder  @relation(fields: [confirmationOrderId], references: [id], onDelete: Cascade)
}
model PermintaanDetails {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  permintaanId        Int
  materialId          Int
  qty                 Int
  satuan              String
  mention             String?
  code                String
  keterangan          String?
  status              PLDStatus            @default(PENDING)
  confirmationDetails ConfirmationDetails[]
  material            Materials             @relation(fields: [materialId], references: [id], onDelete: Cascade)
  permintaan          PermintaanLapangan    @relation(fields: [permintaanId], references: [id], onDelete: Cascade)
}
model Materials {
  id              Int                 @id @default(autoincrement())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  image           String?
  name            String
  description     String
  price           Int
  categoryId      Int
  vendorId        Int
  category        Categories          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  vendor          Vendors             @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  permintaan      PermintaanDetails[]
  PurchaseDetails PurchaseDetails[]
}
model Categories {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String      @unique
  materials Materials[]
}
model Vendors {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  address   String?
  city      String?
  phone     String?
  materials Materials[]
}
model User {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  username           String               @unique
  password           String
  email              String               @unique
  fullName           String
  role               UserRole             @default(USER_LAPANGAN)
  permintaans        PermintaanLapangan[]
  confirmationOrders ConfirmationOrder[]
  PurchaseOrder      PurchaseOrder[]
}
enum PermintaanStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  CLOSED
  CANCELLED
  READ
}
enum COStatus {
  PENDING
  CLOSED
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
  IN_PROGRESS
  READ
}
enum POStatus {
  PENDING
  CLOSED
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
  IN_PROGRESS
  READ
}
enum UserRole {
  ADMIN
  USER_PURCHASE
  USER_LAPANGAN
}
enum DetailStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  CLOSED
  CANCELLED
  READ
  ACC
}
enum PLDStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  CLOSED
  CANCELLED
  READ
}