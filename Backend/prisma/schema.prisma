generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PermintaanLapangan {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  nomor               String              @unique
  tanggal             DateTime
  lokasi              String
  picLapangan         String
  status              PermintaanStatus    @default(PENDING)
  isConfirmed         Boolean             @default(false)
  isReceived          Boolean             @default(false)
  keterangan          String?
  confirmationOrderId Int?                @unique
  detail              PermintaanDetails[]
  confirmationOrder   ConfirmationOrder?  @relation(fields: [confirmationOrderId], references: [id])
  userId              Int?
  user                User?               @relation(fields: [userId], references: [id])
}

model ConfirmationOrder {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  nomorCO             String                @unique
  tanggalCO           DateTime
  lokasiCO            String
  keterangan          String?
  status              COStatus              @default(PENDING)
  confirmationDetails ConfirmationDetails[]
  permintaan          PermintaanLapangan?
  userId              Int?
  user                User?                 @relation(fields: [userId], references: [id])
}

model ConfirmationDetails {
  id                  Int               @id @default(autoincrement())
  confirmationOrderId Int
  permintaanDetailId  Int
  qty                 Int
  code                String
  keterangan          String?
  satuan              String
  permintaanDetail    PermintaanDetails @relation(fields: [permintaanDetailId], references: [id], onDelete: Cascade)
  confirmationOrder   ConfirmationOrder @relation(fields: [confirmationOrderId], references: [id], onDelete: Cascade)
}

model PermintaanDetails {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  permintaanId        Int
  materialId          Int
  qty                 Int
  satuan              String
  mention             String?
  code                String
  keterangan          String?
  confirmationDetails ConfirmationDetails[]
  material            Materials             @relation(fields: [materialId], references: [id], onDelete: Cascade)
  permintaan          PermintaanLapangan    @relation(fields: [permintaanId], references: [id], onDelete: Cascade)
}

model Materials {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  image       String?
  name        String
  description String
  price       Int
  categoryId  Int
  vendorId    Int
  category    Categories          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  vendor      Vendors             @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  permintaan  PermintaanDetails[]
}

model Categories {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String      @unique
  materials Materials[]
}

model Vendors {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  address   String?
  city      String?
  phone     String?
  materials Materials[]
}

model User {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  username           String               @unique
  password           String
  email              String               @unique
  fullName           String
  role               UserRole             @default(USER_LAPANGAN)
  permintaans        PermintaanLapangan[]
  confirmationOrders ConfirmationOrder[]
}

enum PermintaanStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum COStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER_PURCHASE
  USER_LAPANGAN
}
