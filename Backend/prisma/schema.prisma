datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PermintaanLapangan {
  id              Int                 @id @default(autoincrement())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  nomor           String              @unique
  tanggal         DateTime
  lokasi          String
  picLapangan     String
  status          PermintaanStatus    @default(PENDING)
  isConfirmed     Boolean             @default(false)
  isReceived      Boolean             @default(false)
  keterangan      String?
  detail          PermintaanDetails[]
  purchaseOrder   PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int?                @unique
}

model PurchaseOrder {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  nomorPO    String              @unique
  tanggalPO  DateTime
  lokasiPO   String
  keterangan String?
  status     POStatus            @default(PENDING)
  permintaan PermintaanLapangan?
  poDetails  PODetails[]
}

model PODetails {
  id                  Int                 @id @default(autoincrement())
  purchaseOrder       PurchaseOrder       @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId     Int
  permintaanDetail    PermintaanDetails   @relation(fields: [permintaanDetailId], references: [id], onDelete: Cascade)
  permintaanDetailId  Int
  qty                 Int
  satuan              String
  code                String
  keterangan          String?
}


enum PermintaanStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum POStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
}

model PermintaanDetails {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  permintaan   PermintaanLapangan @relation(fields: [permintaanId], references: [id], onDelete: Cascade)
  permintaanId Int
  material     Materials          @relation(fields: [materialId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  materialId   Int
  qty          Int
  satuan       String
  mention      String?
  code         String
  keterangan   String?
  poDetails    PODetails[]
}

model Materials {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  image       String?
  name        String
  description String
  price       Int
  category    Categories          @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId  Int
  vendor      Vendors             @relation(fields: [vendorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  vendorId    Int
  permintaan  PermintaanDetails[]
}

model Categories {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String      @unique
  materials Materials[]
}

model Vendors {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  address   String?
  city      String?
  phone     String?
  materials Materials[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  password  String
  email     String   @unique
  fullName  String
  role      UserRole @default(USER_LAPANGAN)
}

enum UserRole {
  ADMIN
  USER_PURCHASE
  USER_LAPANGAN
}
